# -*- coding: utf-8 -*-
"""Code_PA_PCD_028_088_106_114_B-rev1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agf5RW6L6QMViPKaLA2dk933g3vwBlvf

# Required Libraries
"""

import numpy as np
import cv2 as cv

# Image Preprocessing and Extraction of Texture Traits
from skimage.feature import local_binary_pattern

# Classification
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from keras_preprocessing import image

# Cross Validation
from sklearn.model_selection import cross_val_score

# Plotting
import matplotlib.pyplot as plt

# Folder
import os
from google.colab import files

# Dataframe
import pandas as pd

"""#Local Binary Pattern"""

# Settings for LBP
radius = 2
n_points = 8 * radius
METHOD = 'uniform'

"""Function for Local Binary Pattern Process"""

def img_lbp_hos(source):
    lbp_array = local_binary_pattern(source, n_points, radius, METHOD)
    lbp_array_hist, bins = np.histogram(lbp_array.ravel(), 256, [0, 256])
    lbp_array_trans = np.transpose(lbp_array_hist[0:18, np.newaxis])

    return lbp_array_trans

"""# Dataset Preparation"""

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/My Drive/Colab Notebooks/Dataset_PPCD/"

dataset = []
response = []

j = 0

for label in os.listdir(path):
  for img_path in os.listdir(path + '/' + label):
    try:
      img = cv.imread(path + '/' + label + '/' + img_path, 0)
      img = cv.resize(img, (150, 150))
      his_img = img_lbp_hos(img)
      dataset.append(his_img)
      response.append(j)
    except Exception as err:
      pass
  j += 1

x = np.concatenate((dataset), axis=0).astype(np.float32)
y = np.array(response).astype(np.float32)

"""# Create Dataframe after Feature Extraction Process"""

x

y

Y = pd.DataFrame(y, columns=["Label"])
X = pd.DataFrame(x).assign(label = Y)
Y["Label"].value_counts()

X.count()

X.to_csv(r'feature_extraction_dataset.csv', index=False, header=True,index_label=None)

X = pd.read_csv('feature_extraction_dataset.csv')
X.head(10)

"""Plotting Data

# Classification with KNN

Divide the dataset into train sets and validation sets with sizes of 80% and 20%, respectively.
"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=42)

"""Plotting Data Rock, Paper, and Scissor"""

plt.figure(figsize=[13, 8])

scissor = x_train[y_train.ravel() == 0]
plt.scatter(scissor[:, 0], scissor[:, 1], 10, cmap="autumn")

rock = x_train[y_train.ravel() == 1]
plt.scatter(rock[:, 0], rock[:, 1], 10, cmap="autumn")

paper = x_train[y_train.ravel() == 2]
plt.scatter(paper[:, 0], paper[:, 1], 10, cmap="autumn")

plt.scatter(x_test[:, 0], x_test[:, 1], 10, cmap="autumn")

plt.title("Plotting Data Scissor, Rock, and Paper")
plt.show()

"""Find Best Accuracy for KNN Model with Best K."""

# Model Complexity
neig = np.arange(1, 687)
train_accuracy = []
test_accuracy = []

# Loop Over Different Values of K
for i, k in enumerate(neig):
    
    # K from 1 to 687 (Exclude)
    knn = KNeighborsClassifier(n_neighbors=k)
    
    # Fit with knn
    knn.fit(x_train,y_train)
    
    # Train Accuracy
    train_accuracy.append(knn.score(x_train, y_train))
    
    # Test Accuracy
    test_accuracy.append(knn.score(x_test, y_test))

# Plot
plt.figure(figsize=[13,8])
plt.plot(neig, test_accuracy, label = 'Testing Accuracy')
plt.plot(neig, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.title('Value VS Accuracy')
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.xticks(neig)

plt.show()

print("Best Accuracy is {} with K = {}".format(np.max(test_accuracy), 1 + test_accuracy.index(np.max(test_accuracy))))

"""Create a KNN Model Classification"""

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(x_train, y_train)
prediction = knn.predict(x_test)

"""# Evaluation with Cross Validation

Find Best Accuracy for Cross Validation with Best CV.
"""

# Model Complexity
neig = np.arange(2, 688)
cross_validation = []

# Loop Over Different Values of K
for i, cv in enumerate(neig):

    crossVal = cross_val_score(knn, x, y, cv=cv , scoring='accuracy')

    cross_validation.append(crossVal.mean())

# Plot
plt.figure(figsize=[13, 8])
plt.plot(neig, cross_validation, label = 'Cross Validation Accuracy')
plt.legend()
plt.title('Cross Validation Accuracy')
plt.xlabel('Number of Cross Validation')
plt.ylabel('Accuracy')

plt.xticks(neig)

plt.show()

print("Best Cross Validation is {} with CV = {}".format(np.max(cross_validation), 1 + cross_validation.index(np.max(cross_validation))))

crossVal = cross_val_score(knn, x, y, cv=560, scoring='accuracy')

"""# Conclusion"""

print("Prediction Value")
print(prediction)

print()
print("Y")
print(y_test)

print()
print("Accuracy         : ", float(accuracy_score(y_test, prediction))*100, end=""); print("%")
print("Cross Validation : ", crossVal.mean()*100, end=""); print("%")

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size=(150, 150))
  imgplot = plt.imshow(img)

  img_grayscale = cv.cvtColor(np.array(img), cv.COLOR_BGR2GRAY)
  his_img = img_lbp_hos(img_grayscale)
  y = np.array(his_img).astype(np.float32)

  classes = knn.predict(y)

  print(fn)
  if classes == 0:
    print('Scissors')
  elif classes == 1:
    print('Rock')
  else:
    print('Paper')